#+TITLE: git
#+Date: 2021-04-09

Word's "track changes" for code

* Take Home

  #+begin_quote http://blogs.nature.com/naturejobs/2018/06/11/git-the-reproducibility-tool-scientists-love-to-hate/
“I hate Git….  It is one of the worst pieces of software to teach that
I’ve come across in 35 years of teaching people software.” But, he
adds, mastering Git is as essential to modern research as learning to
read English. Those who use Git and have become immune to its
complexity
  #+end_quote

** end goal
  1. use git to record changes
  2. use rstudio's git panel
  3. upload repo and changes to github
  4. create issues
  5. create and accept pull requests
  6. update themebot theme lists
     
** details
*** git essentials (temrinal, Rstudio)
    init; add/rm, commit, push; pull; diff, status, log, blame
*** git in Rstudio
    git panel, diff, log
*** git extras
    fork/branch, merge, checkout
*** forges (github)
    issue, pull request
*** BFG
    remove committed passwords, large files
*** bonus
    grip, gitmoji, continuous integration

* Meta

 #+begin_quote old proverb
The best time to plant a ~.git~ folder was 10 changes ago.
The second best time is now.
 #+end_quote

** prereqs
    1. git should already be installed.
    2. have access to a terminal (Rstudio terminal okay)

** Workshop w/Will
 There are a few "slides" for context,
 but most of the time should be actually using git

 use <-> grok is cyclical. It's going to be painful

** lens 
 Useful to think of collaboration and "blame"
 w.r.t. your future self


** colophon
 This file is
 ~/Volumes/L/bea_res/Luna/Journal mtg/20210409_git_wf/git.org~

 presenting with emacs ~org-mode~ + ~org-presenter~
 ~doom-solarazied-light~ color scheme,
 ~beacon-mode~ and ~global-hl-line-mode~

 ~(setq org-hide-emphasis-markers t)~
 keys: C-c C-u parent, C-c C-p prev
  speed cmd: n/p=next/prev, f/b=forward/back, m=show me, s=toggle narrow
   
* Why
    [[imghttp://phdcomics.com/comics/archive/phd101212s.gif]]
** Versioning 
*** avoid copies of copies 
    ~xyz_final~, ~xyz_final_final1~, ~xyz_final_final_0409~,
*** history: what happened when
    find that errant "s" accidentally inserted in place of cmd+s

   history of changes to the tat2 script. see ~134aeb1~
   https://github.com/LabNeuroCogDevel/lncdtools/commits/master/tat2
*** organize versions
    branches, tags, commits
*** experimenting locally (distributed changes)
    like merging 3 different paper revisions at the same time
*** commits are documentation
    note for future: write good commit messages
    (bad: "update", "bug fix")
** Github Hosting

   #+begin_quote http://blogs.nature.com/naturejobs/2018/06/11/git-the-reproducibility-tool-scientists-love-to-hate/
Git is the price you have to pay in order to use GitHub
   #+end_quote

*** versioned backup
   lncdr file list
   https://github.com/LabNeuroCogDevel/LNCDR/tree/master/R

*** visual diffs online
   preprocessFunctional only started using ants 3 years ago
   * [[https://github.com/LabNeuroCogDevel/fmri_processing_scripts/commit/e0bf5b353a47f62ef9cf731c9ea03faa122b1869][diff]]
   * [[https://github.com/LabNeuroCogDevel/fmri_processing_scripts/blame/master/preproc_functions/parse_args#L63][blame]]

*** fast search
   github search all our scripts: 3dMEMA examples
   https://github.com/LabNeuroCogDevel/allscripts/search?q=3dMEMA
   
*** sharing and "exposure"
*** collaborate 
    issues, pull requests
   * [[https://github.com/Jfortin1/ComBatHarmonization/issues/29][dependency issue]]
   * [[https://github.com/raamana/pyradigm/pull/47/files][naming things bug]]
   * [[https://github.com/PennBBL/qsiprep/pull/50][bids validate issue]]
   * [[https://github.com/ABCD-STUDY/nda-abcd-s3-downloader/pull/3][improve docs]]
** As a Standard
   adopted elsewhere: brianlife.io, datalad, CRAN
* What its not
*** not easy
*** not centralized
     not designed for share directory (e.g. ~Hera/.../scripts/~)
        but still very useful (see "log" and "blame")
*** not for binary data
     Not useful for tracking changes in images, nifti files
     * see ~datalad~ (~git-annex~) to track size, checksum, permissions
     * onedrive, gdrive, box, etc
*** ~git~ does not have any concept of issues or pull-requests
     "forges" (github, gitlab, bitbucket) provide that
* framework
#+begin_src badplot
working   -     staged   -      HEAD   -   online
        add>          commit>     |  push>
       <diff>                     |
|-------------status--------------|log
#+end_src

* Getting started

  Finally!
  Open a terminal. RStudio terminal will work
  
  Follow along.
  At the very least, it'll add useful bash history 
   (up/down arrow, ~Ctrl+r~)
  
  NB. ~config~ and ~init~ and ~remote add~ are setup commands.
     other commands are for actually tracking changes


** terminal, really?
   #+begin_quote https://r-pkgs.org/git.html
... because only a handful of the 150+ Git commands are available in
RStudio, you also need to be familiar with using Git from the shell
(aka the command line or the console). It’s also useful to be familiar
with using Git in a shell because if you get stuck you’ll need to
search for a solution with the Git command names.
   #+end_quote

  * terminal is the default UI of/by/for git developers 
  * it's where stack overflow help is
  * but ~gitk~ and https://git-scm.com/downloads/guis

** ~config~ - once per computer+user
   #+begin_src shell

     git config --global user.name "Your Name"      # how you'll show up in the logs
     git config --global user.email "user@pitt.edu" # should match github 

     # all that did was write to a file
     git config --list
     cat ~/.gitconfig

   #+end_src
   
 will also do this w/ youruser@rhea

** ~init~ - once per repository

initialize the git repository files.
this creates a ~.git/~ directory at the root of the project

   #+begin_src shell

     mkdir my-test-git-repo
     cd $_  # $_ is last argument from before; also alt+. 
     git init

     ls -la  # see new .git directory
     #+end_src
     
     * This needs to happen only once per coding project.
     * ~add remote~ for github could also happen here.
       We'll come back to that.

*** using alt w/macOS terminals     
[[imghttps://cdn.osxdaily.com/wp-content/uploads/2013/02/meta-key-mac-os-x-terminal.jpg]]

** ~add~, ~commit~ - once per change set
   #+begin_src shell
     date > date.txt
     git add date.txt       # alt-. or $_
     git commit -m 'add date.txt: current date time'
   #+end_src

** ~log~, ~status~, ~diff~ - whats happening

   #+begin_src shell
     git log                      # history
     git log --oneline            # condensed

     git status                   # any changes not tracked

     date > date.txt             # modify file
     echo "foobar" > foobar.txt  # new file, untracked

     git diff date.txt           # red removed, green added
                                  # foobar.txt not mentioned

     git status                   # date.txt and foobar.txt
     git status -uno              # only date.txt (NB. -u no)
   #+end_src

** repeat

   #+begin_src shell
     git add date.txt            # tell git to care about change
     git commit -m 'update time' # and document it

     git add foobar.txt
     git commit -m 'add foobar file'

     # likely to have more than one change at a time
     git mv foobar.txt spam.txt # mv with git preserves history
     echo ham > spam.txt
     date     > date.txt

     head *txt # just to see current state, not git related
     git diff
     git commit -m 'change metasynatic variable name'
   #+end_src
   
** Try it out
  1. make two new files. add and commit them. confirm with log
  2. change a file. add. commit. confirm with log
  3. change one of the files. add. look at diff. anything funny?
  4. change the same file. look at diff. notice missing history?
  5. commit double changed file. look at log
 
*** notes
**** change. add. change. add. commit. tracks as single change
     add stages for commit. commit finalizes. 

* ~push~ to github
  if it's not online, did it even happen?
  you can add a new remote (github, gitlab, another folder, computer)
  all commit history will be perserved. even commits before adding the remote

** create repo on github  -- once per repository

*** with website
 1. from [[http://www.github.com]]
 2. find the green "New" button
 3. create new name: ~github-demo~ (for example)
 4. use povided code to tell local about github
   #+begin_src bash
    # as it says in the new repo
    #git remote add origin https://github.com/USER/REPO
    git remote add origin https://github.com/WillForan/github-demo.git
   #+end_src

*** ~gh~ on the terminal
    #+begin_src bash
      # gh repo new USERNAME/repo-name
      gh repo new WillForan/github-demo
    #+end_src


** ~push~ repo - often as you want (per commit)
    #+begin_src bash
    git push
    #+end_src
    
refresh or visit the github page (~gh repo view --web~)

* experiments
also see [[ohshitgit.com]] ([[dangitgit.com]] in polite company)

#+begin_src badplot
working   -     staged   -      HEAD   -   online
        add>          commit>     |  push>
       <diff>                     |
|-------------status--------------|log
#+end_src

We'll come back to this from inside Rstudio. It'll be easier then 
#+begin_src bash

  date > date.txt
  git diff

  git add date
  git diff

  git reset -- date.txt
  git diff

  git checkout HEAD -- date.txt

#+end_src
   

** in a nutshell
  [[imghttps://imgs.xkcd.com/comics/git.png]]

  #+begin_src dangitgit.com (ohshitgit.com)
Forget this noise, I give up.
    cd ..
    sudo rm -r stupid-git-repo-dir
    git clone https://some.github.url/stupid-git-repo-dir.git
    cd stupid-git-repo-dir
  #+end_src

* Rstudio
** create "project" (*.Rproj) file
https://support.rstudio.com/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN
 
  1. File -> New Project
  2. Existing Project
  3. specify test repo path: ~pwd~ from terminal
** "Git" panel
*** ~add~
   #+begin_src bash
     date > date.txt # see "Status" column change
     git status      # as expected
     # click "Staged" checkbox
     git status      # change moved into "to be comitted"
   #+end_src

*** ~commit~ 
    see "Commit" button
** 

* Pulling
* Resources
  
repo of all *sh *R *m *pl files on LNCD RAIDs
  https://github.com/LabNeuroCogDevel/allscripts

common problem and solution
 https://ohshitgit.com/
 https://dangitgit.com/

git+Rstudio setup tutorial
 https://r-pkgs.org/git.html

more detailed git+R tutorial (University of British Columbia STAT 545)
https://happygitwithr.com/big-picture.html
  https://peerj.com/preprints/3159v2/

git official book
 https://git-scm.com/book/en/v2

github's own tutorial
  https://docs.github.com/en/github/getting-started-with-github/set-up-git
  https://guides.github.com/introduction/flow/
  https://guides.github.com/introduction/git-handbook/

quick presentation (nice checksum animation)
 https://karthik.github.io/git_intro/#/chacon70

after the basics (blog post format)
 https://towardsdatascience.com/a-guide-to-git-for-data-scientists-fd68bc1c729

PLOS paper describing git for science
  https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004668 

videos developed by gitkraken ($$ git gui client)
https://www.gitkraken.com/teacher-resources#get-started 

proposed emoji tags for git commits
https://gitmoji.dev/
* SCM, VCS
Source Control Management or Version Control Software:

Think:
Word's "track changes" for code (or any text file, and even filesystem metadata)

** History and Choices
  * email list with "patches" sent back and forth
  * centralized: SCCS (1972) -> RCS (1982) -> CVS (1986) -> svn (2000)
  * distributed: BitKeeper (2000) -> *git* (2005). many others
 
** Git won
   * used to develop Linux
   * distributed, easy low cost "fork"
   * social network effects

*** b/c github
    * github (2008) acquisition by MS (2018).
    * hosts >190 million repositories (as of 2020-01)
    * mascot/logo "octocat" by the same guy who drew the twitter bird logo

