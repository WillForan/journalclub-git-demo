#+TITLE: git
#+Date: 2021-04-09

* Intro
Word's "track changes" for code

#+begin_quote nature tech blog
 “I hate Git….  It is one of the worst pieces of software to teach that
 I’ve come across in 35 years of teaching people software.” But, he
 adds, mastering Git is as essential to modern research as learning to
 read English.

 Those who use Git and have become immune to its complexity
   #+end_quote

* Take Home
** end goal
   1. track changes on personal code (terminal, rstudio)
   2. collaborate with github (update themebot!)

[[file:simple-flow.png]]
     
** details :skip:
*** git essentials (temrinal, Rstudio)
    init; add/rm, commit, push; pull; diff, status, log, blame
*** git in Rstudio
    git panel, diff, log
*** git extras
    fork/branch, merge, checkout
*** forges (github)
    issue, pull request
*** BFG
    remove committed passwords, large files
*** bonus
    grip, gitmoji, continuous integration

* Meta

 #+begin_quote old proverb
The best time to plant a ~.git~ folder was 10 changes ago.
The second best time is now.
 #+end_quote

** prereqs
    1. git should already be installed.
    2. have access to a terminal (Rstudio terminal okay)

** Workshop w/Will
 There are a few "slides" for context,
 but most of the time should be actually using git

 use <-> grok is cyclical. It's going to be painful

** lens 
 Useful to think of collaboration and "blame"
 w.r.t. your future self


** colophon
 This file is
   https://github.com/WillForan/journalclub-git-demo/blob/main/git.org
 and
   ~/Volumes/L/bea_res/Luna/Journal mtg/20210409_git_wf/git.org~

 
*** emacs :skip:
  presenting with emacs ~org-mode~ 
  ~beacon-mode~,  ~global-hl-line-mode~, ~hide-mode-line-mode~
  ~doom-solarazied-light~ color scheme,
   ... or parchment or ~doom-acario-light~

  ~(setq org-hide-emphasis-markers t)~
  keys: C-c C-u parent, C-c C-p prev
   speed cmd: n/p=next/prev, f/b=forward/back, m=show me, s=toggle narrow
   C-c C-x C-n, C-c C-o  open next link
   C-c C-{n,p} next heading
   C-c C-x C-v toggle images
   
* Why
  
** PhD Comics
  [[imghttp://phdcomics.com/comics/archive/phd101212s.gif]]
** Versioning 
*** avoid copies of copies 
    ~xyz_final~, ~xyz_final_final1~, ~xyz_final_final_0409~,
*** history: what happened when
    find that errant "s" accidentally inserted in place of cmd+s

   history of changes to the tat2 script. see ~134aeb1~
   [[https://github.com/LabNeuroCogDevel/lncdtools/commits/master/tat2][github/..../tat2]]
*** organize versions
    branches, tags, commits
*** experimenting quickly
    easy undo to known good state. also ~stash~
*** commits are documentation
    note for future: write good commit messages
** Github Hosting

   #+begin_quote http://blogs.nature.com/naturejobs/2018/06/11/git-the-reproducibility-tool-scientists-love-to-hate/
Git is the price you have to pay in order to use GitHub
   #+end_quote

*** versioned backup
   lncdr file list: [[https://github.com/LabNeuroCogDevel/LNCDR/tree/master/R][LNCDR]]

*** visual diffs online
   preprocessFunctional only started using ants 3 years ago
   * [[https://github.com/LabNeuroCogDevel/fmri_processing_scripts/commit/e0bf5b353a47f62ef9cf731c9ea03faa122b1869][diff]]
   * [[https://github.com/LabNeuroCogDevel/fmri_processing_scripts/blame/master/preproc_functions/parse_args#L63][blame]]

*** fast search
   github search all our scripts: 3dMEMA examples
   https://github.com/LabNeuroCogDevel/allscripts/search?q=3dMEMA
   
*** sharing and "exposure"
*** collaborate 
    issues, pull requests
   * [[https://github.com/Jfortin1/ComBatHarmonization/issues/29][dependency issue]]
   * [[https://github.com/raamana/pyradigm/pull/47/files][naming things bug]]
   * [[https://github.com/PennBBL/qsiprep/pull/50][bids validate issue]]
   * [[https://github.com/ABCD-STUDY/nda-abcd-s3-downloader/pull/3][improve docs]]
** As a Standard
   adopted elsewhere: brianlife.io, datalad, CRAN
* What its not
** not magic. but maybe
   #+begin_quote http://www-cs-students.stanford.edu/~blynn/gitmagic/
  "any sufficiently advanced technology is indistinguishable from magic"
  This is a great way to approach Git:
 newbies can ignore its inner workings and view Git as a gizmo that can
 amaze friends and infuriate enemies with its wondrous abilities.
   #+end_quote

** not easy
** not centralized
    not designed for share directory (e.g. ~Hera/.../scripts/~)
       but still very useful (see "log" and "blame")
** not for binary data
    Not useful for tracking changes in images, nifti files
    * see ~datalad~ (~git-annex~) to track size, checksum, permissions
    * onedrive, gdrive, box, etc
** ~git~ has no issues or pull-requests
    "forges" (github, gitlab, bitbucket) provide that
* A Terminal, really? Why?
** Why
    #+begin_quote https://r-pkgs.org/git.html
 ... because only a handful of the 150+ Git commands are available in
 RStudio, you also need to be familiar with using Git from the shell
 (aka the command line or the console). It’s also useful to be familiar
 with using Git in a shell because if you get stuck you’ll need to
 search for a solution with the Git command names.
    #+end_quote

   * terminal is the default UI of/by/for git developers 
   * it's where stack overflow help is
   * but ~gitk~ and https://git-scm.com/downloads/guis
    
** Setup

  * Finally time to do something
  * Get to a terminal. RStudio terminal will work
  * At the very least, follow along to add bash history 
    (up/down arrow, ~Ctrl+r~)

*** the quickest command line introduction

  #+begin_src bash
    mkdir my-test-git-repo
    cd $_  # $_ is last argument prev command; same as pushing Alt+. (hold option tap period release alt) 
	   # same as: cd my-test-git-repo 

    date             # print current date and time
    date > date.txt  # save current date to the file date.txt
    cat date.txt     # shows the contents of date.txt
                     # can also open in R studio 
    date             # date's moved on but date.txt is forever in the past

    ls -a            # show all files in the current directory

    echo narcissus   # prints narcissus to screen 
    echo "narcissus" # same thing. quotes used to keep things together
    echo 'narcissus' # same thing.
    echo "$_"        # interpolation
    echo '$_'        # literal
  #+end_src

*** using alt w/macOS terminals :skip:    
[[imghttps://cdn.osxdaily.com/wp-content/uploads/2013/02/meta-key-mac-os-x-terminal.jpg]]



* Framework
  * working - whats in the files. partially finished work    (tinder)
  * staging - finished changes probably ready for commitment (dating)
  * HEAD    - top of history. state forever in the record    (married)


#+begin_src plantuml :file simple-flow.png
  working<->stage:diff
  working->stage:add
  stage->HEAD:commit
  working<->HEAD:status
  working<-HEAD:checkout
  working<-stage:reset
  HEAD->remote:push
  HEAD<-remote:pull
#+end_src

#+RESULTS:
[[file:simple-flow.png]]

* Essential git commands
  * ~config~, ~init~ and ~remote add~ setup the infrastructure. 
    like setting "author" in word and setting up a new dropbox folder
  * other commands actually track changes and are used more often

** ~config~ - once per computer+user
   #+begin_src shell

     git config --global user.name "Your Name"      # name in the logs
     git config --global user.email "user@pitt.edu" # should match github 
     git config --global init.defaultBranch main    # match github's nomenclature 

     # fancy way of writting settings to a file
     git config --list
     cat ~/.gitconfig

   #+end_src
   
 will also do this w/ youruser@rhea

** ~init~ - once per repository

initialize the git repository files.
this creates a ~.git/~ directory at the root of the project

   #+begin_src shell
     # should already be in my-test-git-repo
     git init

     ls -la  # see new .git directory. contains magic
     #+end_src
     
     * This needs to happen only once per coding project.
     * ~add remote~ for github could also happen here.
       We'll come back to that.
     * I'll try point out whats going on in RStudio's git indicators on this first pass. And also cover it specifically later.



** ~add~, ~commit~ - once per change set
   #+begin_src shell
     date > date.txt
     git add date.txt       # alt-. or $_
     git commit -m 'add date.txt: current date time'
   #+end_src

** ~log~, ~status~, ~diff~ - whats happening
   #+begin_src shell
     git log                      # history
     git log --oneline            # condensed

     git status                   # any changes not tracked

     date > date.txt              # modify file
     echo "foobar" > foobar.txt   # new file, untracked

     git diff date.txt            # red removed, green added
                                  # foobar.txt not mentioned

     git status                   # date.txt and foobar.txt
     git status -uno              # only date.txt (NB. -u no)
   #+end_src

** repeat
   #+begin_src shell
     git add date.txt            # tell git to care about change
     git commit -m 'update time' # and document it

     git add foobar.txt
     git commit -m 'add foobar file'

     # likely to have more than one change at a time
     git mv foobar.txt spam.txt # mv with git preserves history
     echo ham > spam.txt
     date     > date.txt

     head *txt # just to see current state, not git related
     git diff
     #  -a means anything modified or removed
     # dont need to 'git add' every file every time
     git commit -a -m 'change metasynatic variable name: now spam'
   #+end_src
   
** ~commit~ without -m
   * without ~-m 'my message'~ git opens $EDITOR to write the message
   * defaults to ~vi~ (~export EDITOR=nano~ in ~~/.bashrc~)
     1. ~:q~ to quit and not save == abort message/commit
     2. ~i~ for insert mode
     3. ~ESC :wq~ to "write and quit"
   * ~#~ lines are ignored. git status is commented out for ref.

*** commit message conventions
    - atomic: commits should change only one thing
    - pithy topline: concise message. easy to look at one line log
    - topline, one space, prose: write whatever you want after the second line

      [[imghttps://imgs.xkcd.com/comics/git_commit.png]]

      #+begin_quote git log of EyeTracker project
7ebbf79  Will Foran  🐛✅ add tests for tracker.py: fix draw_tracking
66250a2  Will Foran  🎨 move common code into tracker. update cli.py
52b9b00  Will Foran  🐛 plot_annotation: pupil_x is now value_x
abb949d  Tian99      Little changeas
a99cf6e  Tian99      Little updates
24b074a  Tian99      User interface half finished
d99c749  Tian99      User Interface
332cb50  Tian99      User interface half finished
95b0a49  Tian99      User interface with slight problem
      #+end_quote
** ~checkout~, ~stash~
   #+begin_src bash

     # change date file
     cat date.txt
     date > date.txt
     cat date.txt

     # revert it back to the last "good" one
     git checkout HEAD -- date.txt

     # go back to even before that
     git checkout HEAD~1 -- date.txt
     cat date.txt

*** ~checkout XXXXX~
    #+begin_src bash
     # instead of HEAD, HEAD~n, we can use checksum of any commit in the log
     git log --oneline

     git checkout $XXXXXX -- date.txt
     cat date.txt

     # OR by matching commit message
     git checkout '/added date.txt' -- date.txt
     cat date.txt
   #+end_src

*** ~stash~
    stash is nice for quickly discarding everything 
    but branching more likey what you want to do
    #+begin_src bash
      # maybe we're not sure about our changes
      date > date.txt
      git stash
      cat date.txt

      git unstash
      cat date.txt
    #+end_src
** ~branch~
   This is where it gets exciting!

   I have a crazy idea to try out but I don't want to get it mixed in with what works.
   #+begin_src bash
     git branch crazy-idea
     git checkout crazy-idea

     # same as: git checkout -b crazy-idea
     date +%s > date.txt
     git commit -am 'try a new date format: seconds'

     # go back
     cat date.txt
     git checkout main # 'main' is 'master' if older git
     cat date.txt

     # return to branch
     git checkout crazy-idea
     cat date.txt
   #+end_src

*** branch half way into changes
as long as you haven't ~add~ed~ (and if you have just ~git reset -- file~)
you can branch after some weird change

    #+begin_src bash
      git status                  # confirm we're back on main, no changes
      date +%F > date.txt         # yet another date format
      git checkout -b date-notime # another new branch
      git commit -am 'remove time from date.txt'
    #+end_src
    
** ~merge~
if we like one of the branches, we can bring it back into main
#+begin_src bash
  git checkout main
  git merge date-notime
  cat date.txt
  git commit -m 'decided notime was the best date format'
#+end_src

* Rstudio
** create "project" (*.Rproj) file
https://support.rstudio.com/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN
 
  1. File -> New Project
  2. Existing Project
  3. specify test repo path: ~pwd~ from terminal
** "Git" panel
*** ~add~, ~reset~
   #+begin_src bash
     date > date.txt # see "Status" column change
     git status      # as expected
     # click "Staged" checkbox   -- git add -- date.txt
     git status      # change moved into "to be comitted"

     # uncheck "Staged" checkbox  -- git reset -- date.txt
     git status      # change is untracked
   #+end_src

*** ~commit~ 
    see "Commit" button. same as running ~git commit~


* Try it out
 suggest making files with multiple lines
 #+begin_src R :session
   library(ggplot2)
   ggplot(mtcars) +  # using default dataset
     aes(y=mpg, x=disp, color=cyl) +
     geom_point() +
     cowplot::theme_cowplot()
 #+end_src

 and edits like changing title, color, aesthetics


** 1. make two new files: a.R, b.R. add and commit them. confirm with log
** 2. change a.R. add. commit. confirm with log
** 3. change b.R. add. look at diff. why don't we see the change?
** 4. change b.R again. look at diff. notice missing history?
** 5. commit b.R. look at log. why don't we see first modification
** 6. edit b.txt. create b-branch
 
** notes
*** change. add. change. add. commit. tracks as single change
    add stages for commit. commit finalizes. 

* ~push~ to github
  if it's not online, did it even happen?

  you can add a new remote (github, gitlab, another folder, computer)
  all commit history will be perserved. even commits before adding the remote

** create repo on github  -- once per repository

*** with website
 1. from [[http://www.github.com]]
 2. find the green "New" button
 3. create new name: ~github-demo~ (for example)
 4. use suggested commands to tell local about github
   #+begin_src bash
    # as it says in the new repo
    #git remote add origin https://github.com/USER/REPO
    git remote add origin https://github.com/WillForan/github-demo.git
   #+end_src

*** ~gh~ on the terminal
    #+begin_src bash
      # gh repo new repo-name
      gh repo new github-demo
      # [enter, enter] to select public and add to origin

      # open this repos webpage
      gh repo view --web
    #+end_src

** ~push~ repo - often as you want (per commit)
    #+begin_src bash
    git push
    #+end_src
    
refresh or visit the github page (~gh repo view --web~)

** ~pull~ - before every push
   if you're collaborating on a branch that someone else (e.g. you on another computer) might have modified. you'll want to pull their changes before you start making new ones.
  ~git pull~
  
it's easy until you've both changed the same thing but in different ways. 
Then you'll have to resolve merge conflicts. That's on the other side of git essentials.

* github collaborate: issue, fork, pull-request
** create an issue
   not too hard. it's all web based

   1. go to https://github.com/LabNeuroCogDevel/slacktheme_bot
   2. click "issues" from mid-top left "tab"-ish menu bar
   3. click green "new"
   4. make an issue "MYNAME's theme suggests are missing"
   5. note the issue # for future reference

** fork a repo
   let's do something about it. we'll get our own copy and fix the issue

   1. go back to https://github.com/LabNeuroCogDevel/slacktheme_bot
   2. click "fork" in the top left (just under repo name/link)
   3. fork to your username
   4. click the green "code" dropdown button
   5. copy the "https" link (just has ~.git~ appended to it)
    https://github.com/WillForan/slacktheme_bot.git
   6. back in the terminal
    ~git clone [clipboard paste]~
    paste might be Ctrl+Shift+v (windows and linux)

** fixing 
   not really git related, but we need have a change to play with pushing
   
   #+begin_src bash
     cd slacktheme_bot/themes
     echo rat snake > $MYNAME.txt
     # maybe follow in files rstudio and and more to the file?

     git add $MYNAME.txt
     git commit -m 'fix #xx: add themes by MYNAME' # use your issue # 
     git push

     # note we didn't have to fill with origin b/c we cloned
     # git is smart enough to set the clone source as origin
   #+end_src
   
** TODO pull request
   if we go back to the github page, it's already suggested we create a pull request! Go for it.
   
TODO: from where to where

 I'll show you want it looks like on my end.
 
 NB. we are all using new/different files to avoid having merge conflicts.
   
* Breakout groups!
  Do we still have any time.
  Is everyone already exhausted?!
  I think this bit is necessary to codify the mushy knowledge about to disappear into the weekend
  

** task
   fix bugs in files funcs/a.R to d.R
   1. everyone clones the buggy repo
   2. pick the "pull person" who will apply the fixed pull-requests
   3. assign each file to one person
   4. fix your assigned file(s)
   5. commit the change with a useful message
   6. push
   7. send pull request to your "pull person"
   8. "pull person" accepts all the requests and tests the code
   9. bonus:
      1. create a new branch 
      2. fix the other bugs not assigned to you
      3. help out


   

** rstudio clone
 As I setup groups. clone this repo with Rstudio

  File -> New Project -> Version Control

 Repository URL: https://github.com/WillForan/journalclub-git-demo
 directory name: (whatever you want, auto set to ~journalclub-git-demo~)
 subdirectory of: must pick a place
 


  

* In review
** covered
  #+begin_src bash
    git clone OR git init
    git add/rm/mv
    git diff/status
    git commit
    # git checkout/branch
    git push
  #+end_src
** major omissions
   * ~git pull~ examples
   * fixing merge conflicts
   * the other 143 git commands

** xkcd
  [[imghttps://imgs.xkcd.com/comics/git.png]]

  #+begin_src dangitgit.com (ohshitgit.com)
Forget this noise, I give up.
    cd ..
    sudo rm -r stupid-git-repo-dir
    git clone https://some.github.url/stupid-git-repo-dir.git
    cd stupid-git-repo-dir
  #+end_src

* SCM, VCS
Source Control Management or Version Control Software:


** History and Choices
  * email list with "patches" sent back and forth
  * centralized: SCCS (1972) -> RCS (1982) -> CVS (1986) -> svn (2000)
  * distributed: BitKeeper (2000) -> *git* (2005). many others
 
** Git won
   * used to develop Linux
   * distributed, easy low cost "fork"
   * social network effects

*** b/c github
    * github (2008) acquisition by MS (2018).
    * hosts >190 million repositories (as of 2020-01)
    * mascot/logo "octocat" by the same guy who drew the twitter bird logo


* Resources
  
repo of all *sh *R *m *pl files on LNCD RAIDs
  https://github.com/LabNeuroCogDevel/allscripts

common problem and solution
 https://ohshitgit.com/ https://dangitgit.com/

git+Rstudio setup tutorial
 https://r-pkgs.org/git.html

more detailed git+R tutorial (University of British Columbia STAT 545)
https://happygitwithr.com/big-picture.html
  https://peerj.com/preprints/3159v2/
 
gentle guide with game analogies. goes into great depth
  http://www-cs-students.stanford.edu/~blynn/gitmagic/

git official book
 https://git-scm.com/book/en/v2

github's own tutorial
  https://docs.github.com/en/github/getting-started-with-github/set-up-git
  https://guides.github.com/introduction/flow/
  https://guides.github.com/introduction/git-handbook/

quick presentation (nice checksum animation)
 https://karthik.github.io/git_intro/#/chacon70

after the basics (blog post format)
 https://towardsdatascience.com/a-guide-to-git-for-data-scientists-fd68bc1c729

PLOS paper describing git for science
  https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004668 

videos developed by gitkraken ($$ git gui client)
https://www.gitkraken.com/teacher-resources#get-started 

proposed emoji tags for git commits
https://gitmoji.dev/

nature blog
  http://blogs.nature.com/naturejobs/2018/06/11/git-the-reproducibility-tool-scientists-love-to-hate/
